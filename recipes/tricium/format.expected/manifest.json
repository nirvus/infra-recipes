[
  {
    "cmd": [],
    "name": "ensure_jiri"
  },
  {
    "cmd": [
      "cipd",
      "ensure",
      "-root",
      "[START_DIR]/cipd/jiri",
      "-ensure-file",
      "fuchsia/tools/jiri/linux-amd64 stable",
      "-json-output",
      "/path/to/tmp/json"
    ],
    "infra_step": true,
    "name": "ensure_jiri.ensure_installed",
    "~followup_annotations": [
      "@@@STEP_NEST_LEVEL@1@@@",
      "@@@STEP_LOG_LINE@json.output@{@@@",
      "@@@STEP_LOG_LINE@json.output@  \"result\": [@@@",
      "@@@STEP_LOG_LINE@json.output@    {@@@",
      "@@@STEP_LOG_LINE@json.output@      \"instance_id\": \"resolved-instance_id-of-stable----------\", @@@",
      "@@@STEP_LOG_LINE@json.output@      \"package\": \"fuchsia/tools/jiri/linux-amd64\"@@@",
      "@@@STEP_LOG_LINE@json.output@    }@@@",
      "@@@STEP_LOG_LINE@json.output@  ]@@@",
      "@@@STEP_LOG_LINE@json.output@}@@@",
      "@@@STEP_LOG_END@json.output@@@"
    ]
  },
  {
    "cmd": [
      "[START_DIR]/cipd/jiri/jiri",
      "init",
      "-v",
      "-time",
      "-analytics-opt=false",
      "-rewrite-sso-to-https=true",
      "-cache",
      "[CACHE]/git",
      "-shared"
    ],
    "name": "jiri init"
  },
  {
    "cmd": [
      "[START_DIR]/cipd/jiri/jiri",
      "import",
      "-v",
      "-time",
      "-name",
      "topaz",
      "-revision",
      "HEAD",
      "manifest/topaz",
      "https://fuchsia.googlesource.com/topaz"
    ],
    "name": "jiri import"
  },
  {
    "cmd": [
      "[START_DIR]/cipd/jiri/jiri",
      "update",
      "-v",
      "-time",
      "-autoupdate=false",
      "-attempts=3",
      "-run-hooks=false"
    ],
    "name": "jiri update"
  },
  {
    "cmd": [],
    "name": "ensure_packages"
  },
  {
    "cmd": [
      "cipd",
      "ensure",
      "-root",
      "[START_DIR]/cipd",
      "-ensure-file",
      "fuchsia/clang/${platform} goma",
      "-json-output",
      "/path/to/tmp/json"
    ],
    "infra_step": true,
    "name": "ensure_packages.ensure_installed",
    "~followup_annotations": [
      "@@@STEP_NEST_LEVEL@1@@@",
      "@@@STEP_LOG_LINE@json.output@{@@@",
      "@@@STEP_LOG_LINE@json.output@  \"result\": [@@@",
      "@@@STEP_LOG_LINE@json.output@    {@@@",
      "@@@STEP_LOG_LINE@json.output@      \"instance_id\": \"resolved-instance_id-of-goma------------\", @@@",
      "@@@STEP_LOG_LINE@json.output@      \"package\": \"fuchsia/clang/${platform}\"@@@",
      "@@@STEP_LOG_LINE@json.output@    }@@@",
      "@@@STEP_LOG_LINE@json.output@  ]@@@",
      "@@@STEP_LOG_LINE@json.output@}@@@",
      "@@@STEP_LOG_END@json.output@@@"
    ]
  },
  {
    "cmd": [
      "[START_DIR]/cipd/bin/clang-format",
      "-style=file",
      "-fallback-style=Google",
      "-sort-includes",
      "-i",
      "path/to/file.h"
    ],
    "name": "formatting path/to/file.h"
  },
  {
    "cmd": [
      "git",
      "diff",
      "--name-only"
    ],
    "name": "check path/to/file.h formatting",
    "stdout": "/path/to/tmp/"
  },
  {
    "cmd": [
      "git",
      "reset",
      "--hard"
    ],
    "name": "reset path/to/file.h"
  },
  {
    "cmd": [
      "[START_DIR]/cipd/bin/clang-format",
      "-style=file",
      "-fallback-style=Google",
      "-sort-includes",
      "-i",
      "other/path/to/file.c"
    ],
    "name": "formatting other/path/to/file.c"
  },
  {
    "cmd": [
      "git",
      "diff",
      "--name-only"
    ],
    "name": "check other/path/to/file.c formatting",
    "stdout": "/path/to/tmp/"
  },
  {
    "cmd": [],
    "name": "write results",
    "~followup_annotations": [
      "@@@SET_BUILD_PROPERTY@tricium@{\"comments\": [{\"category\": \"Format/ClangFormat\", \"end_char\": 0, \"end_line\": 0, \"message\": \"File not formatted properly.\\nRun the following to format:\\n\\nclang-format -i path/to/file.h\", \"path\": \"path/to/file.h\", \"start_char\": 0, \"start_line\": 0, \"suggestion\": [], \"url\": \"\"}]}@@@"
    ]
  },
  {
    "name": "$result",
    "recipe_result": null,
    "status_code": 0
  }
]